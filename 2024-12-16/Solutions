Problem 1.
584. Find Customer Referee
import pandas as pd

def find_customer_referee(customer: pd.DataFrame) -> pd.DataFrame: 
    notnumber2 = customer[(customer['referee_id'] != 2) | (customer['referee_id'].isnull())][['name']]
    return notnumber2

Problem 2.
595. Big Countries
import pandas as pd

def big_countries(world: pd.DataFrame) -> pd.DataFrame:
    df = world[(world['area'] >= 3000000) | (world['population'] >= 25000000)][['name', 'population', 'area']]
    return df

Problem 3.
585. Investments in 2016

import pandas as pd

def find_investments(insurance: pd.DataFrame) -> pd.DataFrame:
    #insurancetable
    df = insurance[['pid', 'tiv_2015', 'tiv_2016', 'lat', 'lon']]
    #cast lat and lon as strings
    df['lat'] = df['lat'].map(str)
    df['lon'] = df['lon'].map(str)
    #concatedloc
    df['loc'] = df['lat'] + df['lon']
    #uniqueloc 
    udf = df.drop_duplicates(subset='loc', keep=False) 
    #duplicate2015
    # Identify non-unique values
    non_unique_values2015 = df['tiv_2015'][df['tiv_2015'].duplicated(keep=False)]
    # Filter the DataFrame to keep only non-unique values
    df_filtered = udf[udf['tiv_2015'].isin(non_unique_values2015)]
    final = pd.DataFrame(
                {"tiv_2016" : [df_filtered['tiv_2016'].sum()]},
                index = [1])

    return final

Problem 4.
1045. Customers Who Bought All Products

import pandas as pd

def find_customers(customer: pd.DataFrame, product: pd.DataFrame) -> pd.DataFrame:
    df = customer.drop_duplicates().groupby('customer_id').count().reset_index()
    return df[df.product_key == len(product)][['customer_id']]
