I am using Google to find the syntax and correcting errors to get the solution. For the prior week of pandas I was consulting the published solutions

Problem 1.
1789. Primary Department for Each Employee

import pandas as pd

def find_primary_department(employee: pd.DataFrame) -> pd.DataFrame:
    primary_df = employee[employee['primary_flag'] == 'Y']
    filtered_df = employee.groupby('employee_id').filter(lambda x: len(x) == 1)
    merged_df = pd.concat([primary_df, filtered_df], axis=0) 
    return merged_df[['employee_id', 'department_id']]

Problem 2.
1795. Rearrange Products Table

import pandas as pd

def rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:
    store1_df = products[['product_id', 'store1']]
    store1_df.columns = ['product_id', 'price']
    store1_df = store1_df.dropna(subset=['price'])
    store1_df = store1_df.assign(store = 'store1')
    store2_df = products[['product_id', 'store2']]
    store2_df.columns = ['product_id', 'price']
    store2_df = store2_df.dropna(subset=['price'])
    store2_df = store2_df.assign(store = 'store2')
    store3_df = products[['product_id', 'store3']]
    store3_df.columns = ['product_id', 'price']
    store3_df = store3_df.dropna(subset=['price'])
    store3_df = store3_df.assign(store = 'store3')
    store12 = pd.concat([store1_df, store2_df])
    allstores = pd.concat([store12, store3_df])
    allstores = allstores.loc[:, ['product_id', 'store', 'price']]
    return allstores

Problem 3.
1907. Count Salary Categories

import pandas as pd

def count_salary_categories(accounts: pd.DataFrame) -> pd.DataFrame:
    df = accounts[['account_id', 'income']]
    ls_df = df.query('income < 20000')
    ls_value = ls_df.count().max()
    avg_df = df.query('20000 <= income <= 50000')
    avg_value = avg_df.count().max()
    hs_df = df.query('income > 50000')
    hs_value = hs_df.count().max()
    final = {'category': ['High Salary', 'Low Salary', 'Average Salary'],
            'accounts_count': ['0', '0', '0']}
    final_df = pd.DataFrame(final)
    final_df.at[1, 'accounts_count'] = ls_value
    final_df.at[2, 'accounts_count'] = avg_value
    final_df.at[0, 'accounts_count'] = hs_value    
    return final_df

Problem 4.
1934. Confirmation Rate

import pandas as pd

def confirmation_rate(signups: pd.DataFrame, confirmations: pd.DataFrame) -> pd.DataFrame:
    s_df = signups[['user_id']]
    df = confirmations[['user_id', 'action']]
    c_df = df[df['action'].str.startswith('con')]
    c_df = c_df[['user_id', 'action']].value_counts('user_id').reset_index(name='numofc')
    a_df = df[['user_id', 'action']].value_counts('user_id').reset_index(name='numofa')
    bmerged_df = pd.merge(s_df, c_df, on='user_id', how='left')
    fmerged_df = pd.merge(bmerged_df, a_df, on='user_id', how='left')
    fmerged_df.fillna(0, inplace=True)
    fmerged_df['confirmation_rate'] = fmerged_df['numofc']/fmerged_df['numofa']
    fmerged_df['confirmation_rate'] = fmerged_df['confirmation_rate'].round(2)
    final_df = fmerged_df[['user_id', 'confirmation_rate']]
    final_df.fillna(0, inplace=True)
    return final_df

Problem 5.
3374. First Letter Capitalization II

import pandas as pd

def capitalize_content(user_content: pd.DataFrame) -> pd.DataFrame:
    df = user_content[['content_id', 'content_text']]
    df['converted_text'] = df['content_text'].str.title()
    df.rename(columns={'content_text': 'original_text'}, inplace=True)
    return df
